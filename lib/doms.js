// Generated by CoffeeScript 1.8.0

/*
//@author: tim.teng <shreadline@gmail.com>
//@desc:   utilities for building html doms
 */

(function() {
  var Html, root;

  Html = (function() {
    function Html() {}

    Html.prototype.createForm = function(attrs) {
      return $("<form/>", attrs);
    };

    Html.prototype.createLabel = function(labelName) {
      return $("<label><strong>" + labelName + "</strong>:</label>");
    };

    Html.prototype.createParagraph = function() {
      return $("<p align='right'/>");
    };

    Html.prototype.createTextField = function(inputName, attrs) {
      var dom, inputType;
      inputType = typeof attrs !== 'undefined' ? attrs["inputType"] : "text";
      if (inputType === "textarea") {
        dom = $("<textarea/>", {
          name: inputName,
          cols: 60,
          rows: 8,
          placeholder: attrs["placeholder"]
        });
      } else {
        dom = $("<input/>", {
          css: {
            "line-height": '30px'
          },
          name: inputName
        });

        /* specify size not work in above attribute, dont konw why */
        dom.attr("size", 55);
      }
      return dom;
    };

    Html.prototype.createInputParagraph = function(labelName, inputName, attrs) {
      var label, paragraph, textInput;
      paragraph = this.createParagraph();
      label = this.createLabel(labelName);
      label.appendTo(paragraph);
      textInput = this.createTextField(inputName, attrs);
      textInput.appendTo(paragraph);
      return paragraph;
    };

    Html.prototype.createSubmitParagraph = function(attrs) {
      var paragraph, submitButton;
      paragraph = this.createParagraph();
      submitButton = $("<input/>", {
        type: "submit",
        value: attrs["value"],
        width: "100px",
        height: "40px"
      });
      submitButton.appendTo(paragraph);
      return paragraph;
    };

    Html.prototype.createDiv = function(attrs) {
      return $("<div/>", attrs);
    };

    Html.prototype.createUl = function() {
      return $("<ul/>");
    };

    Html.prototype.createLi = function() {
      return $("<li/>");
    };

    Html.prototype.createLink = function(attrs) {
      return $("<a/>", attrs);
    };

    Html.prototype.createOption = function(option) {
      return $("<option/>", {
        text: option[0],
        value: option[1]
      });
    };

    Html.prototype.createSelect = function(attrs) {
      var option, select, _i, _len, _ref;
      select = $("<select/>", attrs["selectAttrs"]);
      _ref = attrs["options"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        this.createOption(option).appendTo(select);
      }
      return select;
    };

    Html.prototype.createTabsDiv = function(attrs) {
      var div, index, li, link, tabContainer, ul, _i, _j, _ref, _ref1;
      tabContainer = this.createDiv(attrs["divAttrs"]);
      ul = this.createUl();
      for (index = _i = 0, _ref = attrs["tabTitles"].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        li = this.createLi();
        link = this.createLink({
          href: "#browserUtilTabs-" + (index + 1),
          text: attrs["tabTitles"][index]
        });
        link.appendTo(li);
        li.appendTo(ul);
      }
      ul.appendTo(tabContainer);
      for (index = _j = 0, _ref1 = attrs["tabTitles"].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; index = 0 <= _ref1 ? ++_j : --_j) {
        div = this.createDiv({
          id: "browserUtilTabs-" + (index + 1)
        });
        div.appendTo(tabContainer);
      }
      return tabContainer;
    };

    Html.prototype.createSelectParagraph = function(selectText, attrs) {
      var label, paragraph, select;
      paragraph = this.createParagraph();
      label = this.createLabel(selectText);
      label.appendTo(paragraph);
      select = this.createSelect(attrs);
      select.appendTo(paragraph);
      return paragraph;
    };

    return Html;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Html = Html;

}).call(this);
